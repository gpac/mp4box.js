declare class DataStream {
    constructor(arrayBuffer: ArrayBuffer, byteOffset?: number, endianness?: boolean);
    buffer: ArrayBuffer;
    byteOffset: number;
    dataView: DataView;
    position: number;
    endianness: boolean;
    static BIG_ENDIAN: boolean;
    static LITTLE_ENDIAN: boolean;
    static endianness: boolean;
    static arrayToNative(array: any, arrayIsLittleEndian: boolean): any;
    static nativeToEndian(array: any, littleEndian: boolean): any;
    static flipArrayEndianness(array: any): any;
    static memcpy(dst: ArrayBuffer, dstOffset: number, src: ArrayBuffer, srcOffset: number, byteLength: number): void;
    static fromCharCodeUint8(uint8arr: Uint8Array): string;
    static arrayBufferToString(arrayBuffer: ArrayBuffer): string;
    static stringToArrayBuffer(string: string): ArrayBuffer;
    static arrayBufferToHex(arrayBuffer: ArrayBuffer): string;
    static hexToArrayBuffer(hex: string): ArrayBuffer;
    static arrayBufferToBase64(arrayBuffer: ArrayBuffer): string;
    static base64ToArrayBuffer(base64: string): ArrayBuffer;
    static arrayBufferToInt(arrayBuffer: ArrayBuffer): number;
    static intToArrayBuffer(int: number): ArrayBuffer;
    static arrayBufferToUint(arrayBuffer: ArrayBuffer): number;
    static uintToArrayBuffer(uint: number): ArrayBuffer;
    static arrayBufferToFloat(arrayBuffer: ArrayBuffer): number;
    static floatToArrayBuffer(float: number): ArrayBuffer;
    static arrayBufferToDouble(arrayBuffer: ArrayBuffer): number;
    static doubleToArrayBuffer(double: number): ArrayBuffer;
    static arrayBufferToLong(arrayBuffer: ArrayBuffer): number;
    static longToArrayBuffer(long: number): ArrayBuffer;
    static arrayBufferToULong(arrayBuffer: ArrayBuffer): number;
    static uLongToArrayBuffer(uLong: number): ArrayBuffer;
    static arrayBufferToStringArray(arrayBuffer: ArrayBuffer): string[];
    static stringArrayToArrayBuffer(stringArray: string[]): ArrayBuffer;
    static arrayBufferToIntArray(arrayBuffer: ArrayBuffer): number[];
    static intArrayToArrayBuffer(intArray: number[]): ArrayBuffer;
    static arrayBufferToUintArray(arrayBuffer: ArrayBuffer): number[];
    static uintArrayToArrayBuffer(uintArray: number[]): ArrayBuffer;
    static arrayBufferToFloatArray(arrayBuffer: ArrayBuffer): number[];
    static floatArrayToArrayBuffer(floatArray: number[]): ArrayBuffer;
    static arrayBufferToDoubleArray(arrayBuffer: ArrayBuffer): number[];
    static doubleArrayToArrayBuffer(doubleArray: number[]): ArrayBuffer;
    static arrayBufferToLongArray(arrayBuffer: ArrayBuffer): number[];
    static longArrayToArrayBuffer(longArray: number[]): ArrayBuffer;
    static arrayBufferToULongArray(arrayBuffer: ArrayBuffer): number[];
    static uLongArrayToArrayBuffer(uLongArray: number[]): ArrayBuffer;
    static arrayBufferToStringMap(arrayBuffer: ArrayBuffer): Map<string, string>;
    static stringMapToArrayBuffer(stringMap: Map<string, string>): ArrayBuffer;
    static arrayBufferToIntMap(arrayBuffer: ArrayBuffer): Map<string, number>;
    static intMapToArrayBuffer(intMap: Map<string, number>): ArrayBuffer;
    static arrayBufferToUintMap(arrayBuffer: ArrayBuffer): Map<string, number>;
    static uintMapToArrayBuffer(uintMap: Map<string, number>): ArrayBuffer;
    static arrayBufferToFloatMap(arrayBuffer: ArrayBuffer): Map<string, number>;
    static floatMapToArrayBuffer(floatMap: Map<string, number>): ArrayBuffer;
    static arrayBufferToDoubleMap(arrayBuffer: ArrayBuffer): Map<string, number>;
    static doubleMapToArrayBuffer(doubleMap: Map<string, number>): ArrayBuffer;
    static arrayBufferToLongMap(arrayBuffer: ArrayBuffer): Map<string, number>;
    static longMapToArrayBuffer(longMap: Map<string, number>): ArrayBuffer;
    static arrayBufferToULongMap(arrayBuffer: ArrayBuffer): Map<string, number>;
    static uLongMapToArrayBuffer(uLongMap: Map<string, number>): ArrayBuffer;
    getPosition(): number;
    seek(pos: number): void;
    isEof(): boolean;
    mapUint8Array(length: number): Uint8Array;
    readInt32Array(length?: number, e?: boolean): Int32Array;
    readInt16Array(length?: number, e?: boolean): Int16Array;
    readInt8Array(length?: number): Int8Array;
    readUint32Array(length?: number, e?: boolean): Uint32Array;
    readUint16Array(length?: number, e?: boolean): Uint16Array;
    readUint8Array(length?: number): Uint8Array;
    readFloat64Array(length?: number, e?: boolean): Float64Array;
    readFloat32Array(length?: number, e?: boolean): Float32Array;
    readInt32(e?: boolean): number;
    readInt16(e?: boolean): number;
    readInt8(): number;
    readUint32(e?: boolean): number;
    readUint16(e?: boolean): number;
    readUint8(): number;
    readFloat32(e?: boolean): number;
    readFloat64(e?: boolean): number;
    readString(length: number, encoding?: string): string;
    readCString(length?: number): string;
    readInt64(): number;
    readUint64(): number;
    readUint24(): number;
}
